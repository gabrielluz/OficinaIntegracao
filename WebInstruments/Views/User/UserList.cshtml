@model WebInstruments.ViewModels.NewUserViewModel
@{
    ViewBag.Title = "Usuários";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Scripts.Render("~/bundles/bootstrap")
<h2>Usuários</h2>

<button type="button" id="myBtn" class="btn btn-sm btn-primary btn-create">Adicionar</button>

<table id="myTable" class="table table-striped table-bordered" width="100%" cellspacing="0">
    <thead>
        <tr>
            <th><span class="glyphicon glyphicon-cog"></span></th>
            <th>Nome</th>
            <th>E-mail</th>
            <th>Cpf</th>
            <th>Localidade</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Users)
        {
            <tr>
                <td align="center">
                    <button class="btn btn-primary btn-xs" data-title="Edit" onclick="editUser(@item.Id)"><span class="glyphicon glyphicon-pencil"></span></button>
                    <button class="btn btn-danger btn-xs" data-title="Delete" onclick="remove(@item.Id, '/User/Remove')"><span class="glyphicon glyphicon-trash"></span></button>
                </td>
                <td>@item.Name</td>
                <td>@item.Email</td>
                <td>@item.Cpf</td>
                <td>@(item.Address.City.Name + " (" + @item.Address.State.Acronym.ToUpper() + ")")</td>
            </tr>
        }
    </tbody>
</table>

<div id="myModal" class="modal">
    <div class="modal-content">
        @using (Html.BeginForm("Save", "User"))
        {
            <ul class="nav nav-tabs">
                <li class="active">
                    <a href="#tab1" data-toggle="tab">Usuário</a>
                </li>
                <li>
                    <a href="#tab2" data-toggle="tab">Endereço</a>
                </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane active" id="tab1">
                    <div class="row">
                        <div class="col-md-6">
                            <label>Nome Completo</label>
                            @Html.TextBoxFor(u => u.User.Name, new { @class = "form-control", id = "uName" })
                            
                            <label>E-Mail</label>
                            @Html.TextBoxFor(u => u.User.Email, new { @class = "form-control", id = "uEmail", type = "email" })

                            <label>Senha</label>
                            @Html.PasswordFor(u => u.User.Password, new { @class = "form-control", id = "uPassword" })
                        </div>
                        <div class="col-md-6">
                            <label>CPF</label>
                            @Html.TextBoxFor(u => u.User.Cpf, new { @class = "form-control", id = "uCpf" })

                            <label>Setor</label>
                            @Html.DropDownListFor(mu => mu.User.IdSector, new SelectList(Model.Sectors, "Id", "Name"), new { @class = "form-control text-right", id = "aSector" })

                            <label>Papél</label>
                            @Html.DropDownListFor(mu => mu.User.IdRole, new SelectList(Model.Roles, "Id", "Name"), new { @class = "form-control text-right", id = "rRole" })
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="tab2">
                    <div class="row">
                        <div class="col-md-6">
                            @Html.HiddenFor(mu => mu.Address.Id, new { id = "aId" })
                            <label>Rua</label>
                            @Html.TextBoxFor(mu => mu.Address.Street, new { @class = "form-control", id = "aStreet" })

                            <label>Complemento</label>
                            @Html.TextBoxFor(mu => mu.Address.Complement, new { @class = "form-control", id = "aComplement" })

                            <label>Número</label>
                            @Html.TextBoxFor(mu => mu.Address.Number, new { @class = "form-control", id = "aNumber", type = "aNumber" })
                        </div>
                        <div class="col-md-6">
                            <label>CEP</label>
                            @Html.TextBoxFor(mu => mu.Address.Cep, new { @class = "form-control", id = "aCep" })

                            <label>Estado</label>
                            @Html.DropDownListFor(mu => mu.Address.IdState, new SelectList(Model.States, "Id", "Name"), new { @class = "form-control text-right", id = "aState" })

                            <label>Cidade</label>
                            @Html.DropDownListFor(mu => mu.Address.IdCity, new SelectList(Model.Cities, "Id", "Name"), new { @class = "form-control text-right", id = "aCity" })
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="text-right">
                <input type="submit" class="btn btn-success" value="Salvar" />
                <button class="btn btn-danger" type="button" id="myCloseBtn">Cancelar</button>
            </div>
        }
    </div>
</div>

<script src="~/Scripts/bootstrap.js"></script>
<script src="~/Scripts/datatables.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/Content/datatables.min.css" />
<script src="~/Scripts/functions.js"></script>

<script>
    function editUser(id) {
        $.ajax({
            url: '/User/GetData',
            type: 'POST',
            data: { id: id },
            error: function () {
                alert("Não foi possível editar o Usuário!");
            },
            success: function (data) {
                var obj = JSON.parse(data);
                //debugger;
                //$('#uId').value = obj.Id;
                //$('#uName').value = obj.Name;
                //$('#uEmail').value = obj.Email;
                //$('#aId').value = obj.Address.Id;
                //$('#aStreet').value = obj.Address.Street;
                //$('#aNumber').value = obj.Address.Number;
                //$('#aComplement').value = obj.Address.Complement;
                //$('#aCep').value = obj.Address.Cep;
                //$('#aCity').value = obj.Address.IdCity;
                //$('#aState').value = obj.Address.IdState;
                //$('#rRole').value = obj.Role.Name;
                modal.style.display = "block";
            }
        });
    }

    $(function () {
        $('#aState').on('change',
            function () {
                var cityDropdown = $('#aCity');
                cityDropdown.prop('disabled', 'disabled');
                cityDropdown.empty();

                var state = $(this).val();
                if (state.length > 0) {
                    $.ajax({
                        type: 'POST',
                        url: '/Supplier/GetCities',
                        data: { state: state },
                        dataType: "json",
                        error: function () {
                            alert("error");
                        },
                        success: function (data) {
                            cityDropdown.removeProp('disabled');
                            $.each(data, function (i, city) {
                                var option = $('<option value="' + city.Id + '">' + city.Name + '</option>');
                                cityDropdown.append(option);
                            });
                        }
                    });
                }
            });
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


